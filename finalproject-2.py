# -*- coding: utf-8 -*-
"""Finalproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z781sy_OMKuuFvwz4dv_ppghnhIoUaVn

# Introduction

**Chosen Project:** *Spreadsheet Analysis* - Option 3

**Instructions:**  
In this project you'll use Python to do very basic data analysis on a spreadsheet. The standard project will use csv file that contains fake sales data. After completing the required tasks you are free to change the csv file that you use.

**MoSCoW** of the Project:
- Must read the data from the spreadsheet
- Must collect all of the sales from each month into a single list
- Must output the total sales across all months
- Should ouput a summary of the results to a spreadsheet
- Should calculate the monthly changes in percentages
- Should calculate the average of sales
- Could calculate the highest and lowest sales months
- Could use an extra data source from a different spreadsheet
- Could merge a different spreadsheet in order to operate a comparison

# Option 3 - Main Section
"""

# Commented out IPython magic to ensure Python compatibility.
#Import external libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline

df = pd.read_csv('sales.csv')
df.head()

#Showcase all sales in 2018
df['sales']

# Calculating and printing the profit for every month in 2018
df['sales']- df['expenditure']

#Show profit in a list
profit_list = (df['sales']- df['expenditure']).tolist()
profit_list

#Graph for the profit in 2018
sns.barplot(x='month', y=profit_list, data=df , palette='viridis')

# Show sales in a list
sales_list = df['sales'].tolist()
sales_list

# Calculate the sum of sales
df['sales'].sum()

# Convert to excel
df.to_excel('sales_excel.xlsx')

#Calculate the mean
df['sales'].mean()

#Calculate the month with the maximum sales in 2018
df[['month', 'sales']].max()

#Calculate the month with the minimum sales in 2018
df[['month', 'sales']].min()

#Calculate the percentage change in sales
df['percent_change'] = df['sales'].pct_change()
df['percent_change']

# Figure showing count of sales per month
sns.barplot(x='month', y='sales', data=df, palette='viridis')

sns.pairplot(df)

"""# Option 3 - Extensions"""

#Create new csv file for 2019
import csv
import pandas as pd

with open('sales2019.csv', 'w', newline='') as csvfile:
    fieldnames = ['year', 'month', 'sales', 'expenditure','weather']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

#We have rated the weather based on a system of Ok(=1), Good(=2), Bad(=0). We will use this to compare the sales compared to weather conditions. 

data = [
{'year': '2019','month': 'Jan', 'sales': '6543', 'expenditure': '2345', 'weather': '1'},
{'year': '2019','month': 'Feb', 'sales': '9876', 'expenditure': '1129', 'weather': '2'},
{'year': '2019','month': 'Mar', 'sales': '7834', 'expenditure': '6733', 'weather': '2'},
{'year': '2019','month': 'Apr', 'sales': '3452', 'expenditure': '4321', 'weather': '0'},
{'year': '2019','month': 'May', 'sales': '1674', 'expenditure': '2123', 'weather': '0'},
{'year': '2019','month': 'Jun', 'sales': '9084', 'expenditure': '4532', 'weather': '2'},
{'year': '2019','month': 'Jul', 'sales': '6758', 'expenditure': '2222', 'weather': '1'},
{'year': '2019','month': 'Aug', 'sales': '1232', 'expenditure': '2345', 'weather': '0'},
{'year': '2019','month': 'Sep', 'sales': '9988', 'expenditure': '1456', 'weather': '2'},
{'year': '2019','month': 'Oct', 'sales': '7543', 'expenditure': '3321', 'weather': '2'},
{'year': '2019','month': 'Nov', 'sales': '6788', 'expenditure': '3452', 'weather': '1'},
{'year': '2019','month': 'Dec', 'sales': '6532', 'expenditure': '2147', 'weather': '1'}
]

with open('sales2019.csv', 'w+') as csv_file:
    spreadsheet = csv.DictWriter(csv_file, fieldnames= fieldnames)
    spreadsheet.writeheader()
    spreadsheet.writerows(data)

print('sales2019.csv')

df2 = pd.read_csv('sales2019.csv')
df2.head()

#Printing out the sales results of the year
df2['sales']

#Take month input and output sales
sales_list2 = df2['sales'].tolist()

month = int(input('Which month would you like to see sales data for? (1-12) '))
print(sales_list2[month-1])

#Calculating and printing out the profit earned every month in 2019
df2['sales']-df2['expenditure']

# Show profit in a list
profit_list2 = (df2['sales']- df2['expenditure']).tolist()
profit_list2

# Graphing the profit in 2019
sns.barplot(x='month', y= profit_list2 , data=df2 , palette='viridis')

#Opening the sales result in a line format instead of a table is also possible 
with open('sales2019.csv', 'r') as sales_csv:
     spreadsheet = csv.DictReader(sales_csv)

     sales = []

     for row in spreadsheet:
         sales_list = row['sales']
         sales.append(sales_list)

print('Sales from each month: {}'.format(sales))

#Calculate the sum of sales in 2019
# sales_list = df2['sales'].tolist()
df2['sales'].sum()

#Calculate the sales during the winter 2019
with open('sales2019.csv', 'r') as sales2019_csv:
     spreadsheet = csv.DictReader(sales2019_csv)

     winter_sales = []

     for row in spreadsheet:
         winter_months = row['sales']
         winter_sales.append(winter_months)

total_winter_sales = 0
for winter_sale in winter_sales:
     total_winter_sales = (int(winter_sales[11])) + (int(winter_sales[10])) + (int(winter_sales[9]))

print('Total of sales for the months of winter in 2019: {}'.format(total_winter_sales))

#Calculate the sales during the summer 2019
with open('sales2019.csv', 'r') as sales2019_csv:
     spreadsheet = csv.DictReader(sales2019_csv)

     summer_sales = []

     for row in spreadsheet:
         summer_months = row['sales']
         summer_sales.append(summer_months)

total_summer_sales = 0
for summer_sale in summer_sales:
     total_summer_sales = (int(summer_sales[5])) + (int(summer_sales[6])) + (int(summer_sales[7]))

print('Total of sales for the months of summer in 2019: {}'.format(total_summer_sales))

#convert to excel
df2.to_excel('sales2019_excel.xlsx')

#Calculate the mean
df2['sales'].mean()

#Calculate the maximum sales in 2019
df2[['month', 'sales']].max()

#Calculate the percentage of change in sales
df2['percent_change'] = df2['sales'].pct_change()
df2['percent_change']

#Creating some user input in order to request the user to specificy his demands
with open('sales2019.csv', 'r') as sales2019_csv:
     spreadsheet = csv.DictReader(sales2019_csv)

     maximum_sale = []
     for row in spreadsheet:
         find_sale_maximum = row['sales']
         maximum_sale.append(find_sale_maximum)

find_maximum_sale = max(maximum_sale)

with open('sales2019.csv', 'r') as sales2019_csv:
     spreadsheet = csv.DictReader(sales2019_csv)

     minimum_sale = []
     for row in spreadsheet:
         find_sale_minimum = row['sales']
         minimum_sale.append(find_sale_minimum)

find_minimum_sale = min(minimum_sale)

#User has the choice within 4 options: see the summer sales, winter sales, highest/lowest sales records

while True:
     print('To see the summer sales data, enter 1')
     print('To see the sales winter data, enter 2')
     print('To see the highest sales data, enter 3')
     print('To see the lowest sales data, enter 4')

     user_input = input('Choose between 1-4')

     if user_input == '1':
         print('The total of all sales data from summer 2019 is: {}'.format(total_summer_sales))
         break
     elif user_input == '2':
         print('The total of all sales data from winter 2019 is: {}'.format(total_winter_sales))
         break
     elif user_input == '3':
         print('The maximum amount of sales done in a month in 2019 was : {}'.format(find_maximum_sale))
         break
     elif user_input == '4':
         print('The minimum amount of sales done in a month in 2019 was: {}'.format(find_minimum_sale))
         break

# Figure showing total sales per month
sns.barplot(x='month', y='sales', data=df2, palette='viridis')

sns.barplot(x='weather', y='sales', data=df2, palette='viridis')

"""Here, we can see that as weather improves, total sales increase. There is a positive correlation between weather and sales.

Random
"""

import random

data = [{'year': '2019','month': 'Jan', 'sales': '6543', 'expenditure': '2345', 'weather': '1'},
{'year': '2019','month': 'Feb', 'sales': '9876', 'expenditure': '1129', 'weather': '2'},
{'year': '2019','month': 'Mar', 'sales': '7834', 'expenditure': '6733', 'weather': '2'},
{'year': '2019','month': 'Apr', 'sales': '3452', 'expenditure': '4321', 'weather': '0'},
{'year': '2019','month': 'May', 'sales': '1674', 'expenditure': '2123', 'weather': '0'},
{'year': '2019','month': 'Jun', 'sales': '9084', 'expenditure': '4532', 'weather': '2'},
{'year': '2019','month': 'Jul', 'sales': '6758', 'expenditure': '2222', 'weather': '1'},
{'year': '2019','month': 'Aug', 'sales': '1232', 'expenditure': '2345', 'weather': '0'},
{'year': '2019','month': 'Sep', 'sales': '9988', 'expenditure': '1456', 'weather': '2'},
{'year': '2019','month': 'Oct', 'sales': '7543', 'expenditure': '3321', 'weather': '2'},
{'year': '2019','month': 'Nov', 'sales': '6788', 'expenditure': '3452', 'weather': '1'},
{'year': '2019','month': 'Dec', 'sales': '6532', 'expenditure': '2147', 'weather': '1'}]

value = random.choice(data)
print(value)

"""Random calculations"""

data = [{'year': '2019','month': 'Jan', 'sales': '6543', 'expenditure': '2345', 'weather': '1'},
{'year': '2019','month': 'Feb', 'sales': '9876', 'expenditure': '1129', 'weather': '2'},
{'year': '2019','month': 'Mar', 'sales': '7834', 'expenditure': '6733', 'weather': '2'},
{'year': '2019','month': 'Apr', 'sales': '3452', 'expenditure': '4321', 'weather': '0'},
{'year': '2019','month': 'May', 'sales': '1674', 'expenditure': '2123', 'weather': '0'},
{'year': '2019','month': 'Jun', 'sales': '9084', 'expenditure': '4532', 'weather': '2'},
{'year': '2019','month': 'Jul', 'sales': '6758', 'expenditure': '2222', 'weather': '1'},
{'year': '2019','month': 'Aug', 'sales': '1232', 'expenditure': '2345', 'weather': '0'},
{'year': '2019','month': 'Sep', 'sales': '9988', 'expenditure': '1456', 'weather': '2'},
{'year': '2019','month': 'Oct', 'sales': '7543', 'expenditure': '3321', 'weather': '2'},
{'year': '2019','month': 'Nov', 'sales': '6788', 'expenditure': '3452', 'weather': '1'},
{'year': '2019','month': 'Dec', 'sales': '6532', 'expenditure': '2147', 'weather': '1'}]

print (len(data))
print (data[4])
print (data[4], data[6])